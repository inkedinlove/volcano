generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blockchain {
  id                   String   @id @default(cuid())
  image                String?
  title                String
  description          String
  price                Float
  website              String?
  whitepaper           String?
  yearFounded          Int?
  founder              String?
  headquarters         String?
  token                String?
  tokenType            String?
  symbol               String   @unique
  marketCap            Float?
  totalSupply          Float?
  circulatingSupply    Float?
  networkLayer         Int?
  accessibility        String?
  centralization       String?
  activeWallets        BigInt?
  nodes                String?
  singleEntities       Int?
  censorshipResistance String?
  smartContract        Boolean?
  twentyFourHrPrice    Float?
  scriptingLanguage    String?
  tps                  String?
  confirmationTime     String?
  consensusMechanism   String?
  vulnerabilities      String?
  assetValue           BigInt?
  networkCost          String?
  energyEfficiency     String?
  interoperability     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  favoriteBy User[]   @relation(name: "FavoritesBlockchains")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String       @id @default(cuid())
  name                String?
  email               String?      @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  favoriteblockchains Blockchain[] @relation(name: "FavoritesBlockchains")
}

model VerificationToken {
  identifier String
  token      String   @id @unique
  expires    DateTime

  @@unique([identifier, token])
}
